{"version":3,"sources":["components/assumptions.tsx","components/counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Assumptions","className","mySort","myObj","type","sort","x","y","a","b","value","toUpperCase","count","Counter","useState","noOfWords","setNoOfWords","noOfChar","setNoOfChar","outputList","setOutputList","outputListFinalObjects","setOutputListFinalObjects","generateTableType","setGenerateTableType","assumptionsToggle","setAssumptionsToggle","searchVal","setSearchVal","useEffect","generateTableObjects","sortList","outputListArrayOri","outputListArrayCopy","outputListArrayLength","length","finalList","counter","i","j","tempObject","includes","push","handleClick","e","target","id","rendertable","Object","entries","map","data","index","src","width","alt","maxLength","aria-label","aria-describedby","onChange","words","toString","textInputs","trim","replace","textInputsArray","split","onClick","style","backgroundColor","borderRadius","maxWidth","style2","textAlign","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34535e35.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './../css/counter.css';\r\n\r\nconst Assumptions: React.FC = () =>{\r\n    return(\r\n        <div className=\"assumptionsDiv\">\r\n            <h4>List of assumptions</h4> \r\n            <div>\r\n                <ul className=\"list-group assumptionsList\">\r\n                    <li className=\"list-group-item assumptionsItem\">Duplicate words will only show once</li>\r\n                    <li className=\"list-group-item assumptionsItem\">The word count function is case-sensitive</li>\r\n                    <li className=\"list-group-item assumptionsItem\">The search function is case-insensitive</li>\r\n                    <li className=\"list-group-item assumptionsItem\">Only alphanumeric will be counted</li>\r\n                    <li className=\"list-group-item assumptionsItem\">5000 maximum character input</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Assumptions;","import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './../css/counter.css';\r\nimport Assumptions from './assumptions'\r\n\r\nconst Counter: React.FC = () =>{\r\n\r\n  const[noOfWords, setNoOfWords] = useState(0);\r\n  const[noOfChar, setNoOfChar] = useState(0);\r\n  const[outputList, setOutputList] = useState([]);\r\n  const[outputListFinalObjects, setOutputListFinalObjects] = useState([{value: \" \",count: 0}]);\r\n  const[generateTableType, setGenerateTableType] = useState(\"default\");\r\n  const[assumptionsToggle, setAssumptionsToggle] = useState(false);\r\n  const[searchVal, setSearchVal] = useState(\"\");\r\n\r\n  const handleChange = (e: any) =>{\r\n    let words = e.target.value.toString();\r\n    if (words.length>0){\r\n      let textInputs = words.trim().replace(/\\s+/g, \" \");\r\n      textInputs = textInputs.replace(/[^\\w\\s]/gi, \"\");\r\n      let textInputsArray:any = textInputs.split(\" \");\r\n\r\n      setNoOfWords(textInputsArray.length);\r\n      setNoOfChar(words.length);\r\n      setOutputList(textInputsArray);\r\n    }else{\r\n      setOutputList([]);\r\n      rendertable ();\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateTableObjects();\r\n  }, [outputList,searchVal]); \r\n\r\n  useEffect(() => {\r\n    generateTableObjects();\r\n    sortList(generateTableType);\r\n  }, [searchVal]);   \r\n\r\n  useEffect(() => {\r\n    sortList(generateTableType);\r\n  }, [generateTableType]); \r\n  \r\n  const generateTableObjects = () => {\r\n\r\n    let outputListArrayOri:any = [...outputList];\r\n    let outputListArrayCopy:any = [...outputList];\r\n    let outputListArrayLength:number = outputListArrayOri.length;\r\n    let finalList:any = [];\r\n    let counter:number = 0;\r\n    \r\n    for(let i=0; i<outputListArrayLength; i++){\r\n        counter = 0;\r\n        for(let j=0; j<outputListArrayLength; j++){\r\n          if(outputListArrayOri[i]===outputListArrayCopy[j]){\r\n            counter++;\r\n            delete outputListArrayCopy[j];\r\n          }\r\n        };\r\n        if (counter>0){\r\n          let tempObject = {\r\n            value: \"\",\r\n            count: 0\r\n          };\r\n          tempObject.value = outputListArrayOri[i];\r\n          tempObject.count = counter;\r\n          if (searchVal !== \"\"){\r\n            if (tempObject.value.toUpperCase().includes(searchVal.toUpperCase())){\r\n              finalList.push(tempObject);\r\n            };\r\n          }else{\r\n            finalList.push(tempObject);\r\n          };\r\n        };  \r\n    };\r\n    setOutputListFinalObjects(finalList);\r\n  };  \r\n\r\n  const handleClick = (e:any) => {\r\n    sortList(e.target.id);\r\n    setGenerateTableType(e.target.id);\r\n  };\r\n\r\n  const sortList = (e: any) => {                \r\n    let objectToSort = outputListFinalObjects\r\n    e!==\"default\"?mySort (objectToSort,e): generateTableObjects();\r\n  };\r\n\r\n  const rendertable = () => {\r\n    if(outputList.length===0){\r\n      return <tr><td><p>-</p></td><td><p>Please insert text</p></td><td><p>-</p></td></tr>\r\n    }else{\r\n      return Object.entries(outputListFinalObjects).map((data, index) => (\r\n        <tr key={index}><td>{index+1}</td><td>{data[1].value}</td><td>{data[1].count}</td></tr>                        \r\n      ))\r\n    };\r\n  };\r\n\r\n  const showAssumptions = () =>{\r\n    setAssumptionsToggle(true);\r\n  };\r\n\r\n  return(\r\n    <div className=\"container-sm\">\r\n      <div className=\"bannerImgDiv\">\r\n        <img className=\"img-fluid\" src=\"https://res-2.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco/k68uhvefpuv5b6u4ds0k\" width=\"400\" alt=\"\"/>\r\n        <h2>React and Typescript Word Count Challenge</h2>\r\n      </div>\r\n      <h5>Insert words below</h5>\r\n      <div className=\"row textAreaDiv\">\r\n        <textarea \r\n          id=\"myTextarea\"\r\n          maxLength={5000}\r\n          className=\"form-control myText\" \r\n          aria-label=\"Sizing example input\" \r\n          aria-describedby=\"inputGroup-sizing-lg\"\r\n          onChange = {handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col columnNumberDiv\">\r\n          <span className=\"badge rounded-pill bg-info text-dark bg-lg m-2\">Total Characters: {noOfChar}/5000</span>\r\n          <span className=\"badge rounded-pill bg-info text-dark bg-lg m-2\">Total Words: {noOfWords}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col searchDiv\">\r\n            <span>Search: </span>\r\n            <input type=\"text\"  onChange= {e =>setSearchVal(e.target.value)} className=\"wordSearch\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"listTableDiv\">          \r\n          <div className=\"row\">\r\n            <div className=\"col resetDiv\">\r\n              <button type=\"button\" id=\"default\" onClick={handleClick} className=\"btn btn-outline-dark btn-sm m-2\">Reset Sorting</button>\r\n            </div>\r\n          </div>\r\n          <table className=\"table table-striped table-hover\"> \r\n            <thead><tr><th className=\"myIdx\"><span>Index</span></th><th>Words\r\n            <button type=\"button\" id=\"sortAscending\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8593;</button>\r\n            <button type=\"button\" id=\"sortDescending\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8595;</button>\r\n            </th><th>Counts\r\n            <button type=\"button\" id=\"sortCountA\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8593;</button>\r\n            <button type=\"button\" id=\"sortCountD\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8595;</button>\r\n            </th></tr></thead>\r\n            <tbody>\r\n              {rendertable()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col assumptionsDiv\">\r\n          {assumptionsToggle ? \"\" : <button type=\"button\" onClick={e =>setAssumptionsToggle(true)} className=\"btn btn-outline-dark btn-sm m-2\">Show Assumptions</button>}\r\n          {!assumptionsToggle ? \"\" : <button type=\"button\" onClick={e =>setAssumptionsToggle(false)} className=\"btn btn-outline-dark btn-sm m-2\">Hide Assumptions</button>}\r\n          {assumptionsToggle ? <Assumptions /> : \"\"}\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mySort = (myObj:any,type:String) =>{\r\n  myObj.sort(\r\n    function (x:any, y:any) {\r\n      let a,b\r\n      switch (type){\r\n        case \"sortAscending\":\r\n          a = x.value.toUpperCase(); \r\n          b = y.value.toUpperCase();  \r\n          return a === b ? 0 : a > b ? 1 : -1;\r\n        case \"sortDescending\":\r\n          a = x.value.toUpperCase();\r\n          b = y.value.toUpperCase();  \r\n          return a === b ? 0 : a > b ? -1 : 1;\r\n        case \"sortCountA\":\r\n          return x.count - y.count;\r\n        case \"sortCountD\":\r\n          return y.count - x.count;\r\n      };\r\n  });  \r\n};\r\n\r\nexport default Counter;","import React from 'react';\nimport Counter from './components/counter';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './css/counter.css';\n\nconst style = {\n  backgroundColor: \"rgb(255 253 253 / 45%)\",\n  borderRadius: \"25px\",\n  maxWidth: \"1400px\"\n};\n\nconst style2:any = {\n  width: \"100%\",\n  textAlign: \"-webkit-center\"\n};\n\nconst App: React.FC = () =>{\n  return(\n    <div className=\"mainWrap\" style={style2}>\n      <div className=\"secondaryWrap\" style={style}>\n        <Counter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}