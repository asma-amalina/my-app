[{"C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\index.tsx":"1","C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\App.tsx":"3","C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\components\\counter.tsx":"4","C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\components\\assumptions.tsx":"5"},{"size":596,"mtime":1609466709547,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":587,"mtime":1609471755187,"results":"9","hashOfConfig":"7"},{"size":6901,"mtime":1609477081907,"results":"10","hashOfConfig":"7"},{"size":982,"mtime":1609476580645,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ncymww",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\index.tsx",[],["24","25"],"C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\App.tsx",[],"C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\components\\counter.tsx",["26","27","28","29","30"],"import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './../css/counter.css';\r\nimport Assumptions from './assumptions'\r\n\r\nconst Counter: React.FC = () =>{\r\n\r\n  const[noOfWords, setNoOfWords] = useState(0);\r\n  const[noOfChar, setNoOfChar] = useState(0);\r\n  const[outputList, setOutputList] = useState([]);\r\n  const[outputListFinalObjects, setOutputListFinalObjects] = useState([{value: \" \",count: 0}]);\r\n  const[generateTableType, setGenerateTableType] = useState(\"default\");\r\n  const[assumptionsToggle, setAssumptionsToggle] = useState(false);\r\n  const[searchVal, setSearchVal] = useState(\"\");\r\n\r\n  const handleChange = (e: any) =>{\r\n    let words = e.target.value.toString();\r\n    if (words.length>0){\r\n      let textInputs = words.trim().replace(/\\s+/g, \" \");\r\n      textInputs = textInputs.replace(/[^\\w\\s]/gi, \"\");\r\n      let textInputsArray:any = textInputs.split(\" \");\r\n\r\n      setNoOfWords(textInputsArray.length);\r\n      setNoOfChar(words.length);\r\n      setOutputList(textInputsArray);\r\n    }else{\r\n      setOutputList([]);\r\n      rendertable ();\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateTableObjects();\r\n  }, [outputList,searchVal]); \r\n\r\n  useEffect(() => {\r\n    generateTableObjects();\r\n    sortList(generateTableType);\r\n  }, [searchVal]);   \r\n\r\n  useEffect(() => {\r\n    sortList(generateTableType);\r\n  }, [generateTableType]); \r\n  \r\n  const generateTableObjects = () => {\r\n\r\n    let outputListArrayOri:any = [...outputList];\r\n    let outputListArrayCopy:any = [...outputList];\r\n    let outputListArrayLength:number = outputListArrayOri.length;\r\n    let finalList:any = [];\r\n    let counter:number = 0;\r\n    \r\n    for(let i=0; i<outputListArrayLength; i++){\r\n        counter = 0;\r\n        for(let j=0; j<outputListArrayLength; j++){\r\n          if(outputListArrayOri[i]===outputListArrayCopy[j]){\r\n            counter++;\r\n            delete outputListArrayCopy[j];\r\n          }\r\n        };\r\n        if (counter>0){\r\n          let tempObject = {\r\n            value: \"\",\r\n            count: 0\r\n          };\r\n          tempObject.value = outputListArrayOri[i];\r\n          tempObject.count = counter;\r\n          if (searchVal !== \"\"){\r\n            if (tempObject.value.toUpperCase().includes(searchVal.toUpperCase())){\r\n              finalList.push(tempObject);\r\n            };\r\n          }else{\r\n            finalList.push(tempObject);\r\n          };\r\n        };  \r\n    };\r\n    setOutputListFinalObjects(finalList);\r\n  };  \r\n\r\n  const handleClick = (e:any) => {\r\n    sortList(e.target.id);\r\n    setGenerateTableType(e.target.id);\r\n  };\r\n\r\n  const sortList = (e: any) => {                \r\n    let objectToSort = outputListFinalObjects\r\n    e!==\"default\"?mySort (objectToSort,e): generateTableObjects();\r\n  };\r\n\r\n  const rendertable = () => {\r\n    if(outputList.length===0){\r\n      return <tr><td><p>-</p></td><td><p>Please insert text</p></td><td><p>-</p></td></tr>\r\n    }else{\r\n      return Object.entries(outputListFinalObjects).map((data, index) => (\r\n        <tr key={index}><td>{index+1}</td><td>{data[1].value}</td><td>{data[1].count}</td></tr>                        \r\n      ))\r\n    };\r\n  };\r\n\r\n  const showAssumptions = () =>{\r\n    setAssumptionsToggle(true);\r\n  };\r\n\r\n  return(\r\n    <div className=\"container-sm\">\r\n      <div className=\"bannerImgDiv\">\r\n        <img className=\"img-fluid\" src=\"https://res-2.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco/k68uhvefpuv5b6u4ds0k\" width=\"400\" alt=\"\"/>\r\n        <h2>React and Typescript Word Count Challenge</h2>\r\n      </div>\r\n      <h5>Insert words below</h5>\r\n      <div className=\"row textAreaDiv\">\r\n        <textarea \r\n          id=\"myTextarea\"\r\n          maxLength={5000}\r\n          className=\"form-control myText\" \r\n          aria-label=\"Sizing example input\" \r\n          aria-describedby=\"inputGroup-sizing-lg\"\r\n          onChange = {handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col columnNumberDiv\">\r\n          <span className=\"badge rounded-pill bg-info text-dark bg-lg m-2\">Total Characters: {noOfChar}/5000</span>\r\n          <span className=\"badge rounded-pill bg-info text-dark bg-lg m-2\">Total Words: {noOfWords}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col searchDiv\">\r\n            <span>Search: </span>\r\n            <input type=\"text\"  onChange= {e =>setSearchVal(e.target.value)} className=\"wordSearch\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"listTableDiv\">          \r\n          <div className=\"row\">\r\n            <div className=\"col resetDiv\">\r\n              <button type=\"button\" id=\"default\" onClick={handleClick} className=\"btn btn-outline-dark btn-sm m-2\">Reset Sorting</button>\r\n            </div>\r\n          </div>\r\n          <table className=\"table table-striped table-hover\"> \r\n            <thead><tr><th className=\"myIdx\"><span>Index</span></th><th>Words\r\n            <button type=\"button\" id=\"sortAscending\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8593;</button>\r\n            <button type=\"button\" id=\"sortDescending\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8595;</button>\r\n            </th><th>Counts\r\n            <button type=\"button\" id=\"sortCountA\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8593;</button>\r\n            <button type=\"button\" id=\"sortCountD\" onClick={handleClick} className=\"btn btn-outline-secondary btn-sm m-2\">&#8595;</button>\r\n            </th></tr></thead>\r\n            <tbody>\r\n              {rendertable()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col assumptionsDiv\">\r\n          {assumptionsToggle ? \"\" : <button type=\"button\" onClick={e =>setAssumptionsToggle(true)} className=\"btn btn-outline-dark btn-sm m-2\">Show Assumptions</button>}\r\n          {!assumptionsToggle ? \"\" : <button type=\"button\" onClick={e =>setAssumptionsToggle(false)} className=\"btn btn-outline-dark btn-sm m-2\">Hide Assumptions</button>}\r\n          {assumptionsToggle ? <Assumptions /> : \"\"}\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nconst mySort = (myObj:any,type:String) =>{\r\n  myObj.sort(\r\n    function (x:any, y:any) {\r\n      let a,b\r\n      switch (type){\r\n        case \"sortAscending\":\r\n          a = x.value.toUpperCase(); \r\n          b = y.value.toUpperCase();  \r\n          return a === b ? 0 : a > b ? 1 : -1;\r\n        case \"sortDescending\":\r\n          a = x.value.toUpperCase();\r\n          b = y.value.toUpperCase();  \r\n          return a === b ? 0 : a > b ? -1 : 1;\r\n        case \"sortCountA\":\r\n          return x.count - y.count;\r\n        case \"sortCountD\":\r\n          return y.count - x.count;\r\n      };\r\n  });  \r\n};\r\n\r\nexport default Counter;","C:\\Users\\Syahir\\Desktop\\Along\\react\\my-app\\src\\components\\assumptions.tsx",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":35,"column":6,"nodeType":"37","endLine":35,"endColumn":28,"suggestions":"38"},{"ruleId":"35","severity":1,"message":"39","line":40,"column":6,"nodeType":"37","endLine":40,"endColumn":17,"suggestions":"40"},{"ruleId":"35","severity":1,"message":"41","line":44,"column":6,"nodeType":"37","endLine":44,"endColumn":25,"suggestions":"42"},{"ruleId":"43","severity":1,"message":"44","line":101,"column":9,"nodeType":"45","messageId":"46","endLine":101,"endColumn":24},{"ruleId":"47","severity":1,"message":"48","line":168,"column":5,"nodeType":"49","messageId":"50","endLine":168,"endColumn":14},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateTableObjects'. Either include it or remove the dependency array.","ArrayExpression",["53"],"React Hook useEffect has missing dependencies: 'generateTableObjects', 'generateTableType', and 'sortList'. Either include them or remove the dependency array.",["54"],"React Hook useEffect has a missing dependency: 'sortList'. Either include it or remove the dependency array.",["55"],"@typescript-eslint/no-unused-vars","'showAssumptions' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [generateTableObjects, outputList, searchVal]",{"range":"62","text":"63"},"Update the dependencies array to be: [generateTableObjects, generateTableType, searchVal, sortList]",{"range":"64","text":"65"},"Update the dependencies array to be: [generateTableType, sortList]",{"range":"66","text":"67"},[1208,1230],"[generateTableObjects, outputList, searchVal]",[1326,1337],"[generateTableObjects, generateTableType, searchVal, sortList]",[1406,1425],"[generateTableType, sortList]"]